{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getStatusProps, isDocumentVisible, isServer, isValidTimeout, noop } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { QueryStatus } from './types';\nimport { DEFAULT_CONFIG, isResolvedQueryConfig } from './config';\nexport var QueryObserver = /*#__PURE__*/function () {\n  function QueryObserver(config) {\n    this.config = config;\n    this.isStale = true;\n    this.initialUpdateCount = 0; // Bind exposed methods\n\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n    this.fetchMore = this.fetchMore.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this); // Subscribe to the query\n\n    this.updateQuery();\n  }\n  var _proto = QueryObserver.prototype;\n  _proto.subscribe = function subscribe(listener) {\n    this.listener = listener || noop;\n    this.currentQuery.subscribeObserver(this);\n    if (this.config.enabled && (this.config.forceFetchOnMount || this.config.refetchOnMount === 'always')) {\n      this.fetch();\n    } else {\n      this.optionalFetch();\n    }\n    this.updateTimers();\n    return this.unsubscribe;\n  };\n  _proto.unsubscribe = function unsubscribe() {\n    this.listener = undefined;\n    this.clearTimers();\n    this.currentQuery.unsubscribeObserver(this);\n  };\n  _proto.updateConfig = function updateConfig(config) {\n    var prevConfig = this.config;\n    var prevQuery = this.currentQuery;\n    this.config = isResolvedQueryConfig(config) ? config : this.config.queryCache.getResolvedQueryConfig(this.config.queryKey, config);\n    this.updateQuery(); // Take no further actions if there is no subscriber\n\n    if (!this.listener) {\n      return;\n    } // If we subscribed to a new query, optionally fetch and update refetch\n\n    if (this.currentQuery !== prevQuery) {\n      this.optionalFetch();\n      this.updateTimers();\n      return;\n    } // Optionally fetch if the query became enabled\n\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch();\n    } // Update stale interval if needed\n\n    if (config.enabled !== prevConfig.enabled || config.staleTime !== prevConfig.staleTime) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n    if (config.enabled !== prevConfig.enabled || config.refetchInterval !== prevConfig.refetchInterval) {\n      this.updateRefetchInterval();\n    }\n  };\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  }\n  /**\n   * @deprecated\n   */;\n  _proto.clear = function clear() {\n    this.remove();\n  };\n  _proto.remove = function remove() {\n    this.currentQuery.remove();\n  };\n  _proto.refetch = function refetch(options) {\n    return this.currentQuery.refetch(options, this.config);\n  };\n  _proto.fetchMore = function fetchMore(fetchMoreVariable, options) {\n    return this.currentQuery.fetchMore(fetchMoreVariable, options, this.config).catch(noop);\n  };\n  _proto.fetch = function fetch() {\n    var _DEFAULT_CONFIG$queri;\n\n    // Never try to fetch if no query function has been set\n    if (this.config.queryFn === ((_DEFAULT_CONFIG$queri = DEFAULT_CONFIG.queries) == null ? void 0 : _DEFAULT_CONFIG$queri.queryFn)) {\n      return Promise.resolve(this.currentResult.data);\n    }\n    return this.currentQuery.fetch(undefined, this.config).catch(noop);\n  };\n  _proto.optionalFetch = function optionalFetch() {\n    if (this.config.enabled &&\n    // Only fetch if enabled\n    this.isStale &&\n    // Only fetch if stale\n    !(this.config.suspense && this.currentResult.isFetched) && (\n    // Don't refetch if in suspense mode and the data is already fetched\n    this.config.refetchOnMount || this.currentQuery.observers.length === 1)) {\n      this.fetch();\n    }\n  };\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this = this;\n    if (isServer) {\n      return;\n    }\n    this.clearStaleTimeout();\n    if (this.isStale || !isValidTimeout(this.config.staleTime)) {\n      return;\n    }\n    var timeElapsed = Date.now() - this.currentResult.updatedAt;\n    var timeUntilStale = this.config.staleTime - timeElapsed + 1;\n    var timeout = Math.max(timeUntilStale, 0);\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this.isStale) {\n        _this.isStale = true;\n        _this.updateResult();\n        _this.notify({\n          listener: true,\n          globalListeners: true\n        });\n      }\n    }, timeout);\n  };\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this2 = this;\n    if (isServer) {\n      return;\n    }\n    this.clearRefetchInterval();\n    if (!this.config.enabled || !isValidTimeout(this.config.refetchInterval)) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(function () {\n      if (_this2.config.refetchIntervalInBackground || isDocumentVisible()) {\n        _this2.fetch();\n      }\n    }, this.config.refetchInterval);\n  };\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  };\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  };\n  _proto.updateResult = function updateResult() {\n    var _this$previousQueryRe;\n    var state = this.currentQuery.state;\n    var data = state.data,\n      status = state.status,\n      updatedAt = state.updatedAt;\n    var isPreviousData = false;\n    var isPlaceholderData = false; // Keep previous data if needed\n\n    if (this.config.keepPreviousData && state.isInitialData && ((_this$previousQueryRe = this.previousQueryResult) == null ? void 0 : _this$previousQueryRe.isSuccess)) {\n      data = this.previousQueryResult.data;\n      updatedAt = this.previousQueryResult.updatedAt;\n      status = this.previousQueryResult.status;\n      isPreviousData = true;\n    }\n    if (status === 'loading' && this.config.placeholderData) {\n      var placeholderData = typeof this.config.placeholderData === 'function' ? this.config.placeholderData() : this.config.placeholderData;\n      if (typeof placeholderData !== 'undefined') {\n        status = QueryStatus.Success;\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n    this.currentResult = _extends({}, getStatusProps(status), {\n      canFetchMore: state.canFetchMore,\n      clear: this.remove,\n      data: data,\n      error: state.error,\n      failureCount: state.failureCount,\n      fetchMore: this.fetchMore,\n      isFetched: state.updateCount > 0,\n      isFetchedAfterMount: state.updateCount > this.initialUpdateCount,\n      isFetching: state.isFetching,\n      isFetchingMore: state.isFetchingMore,\n      isInitialData: state.isInitialData,\n      isPreviousData: isPreviousData,\n      isPlaceholderData: isPlaceholderData,\n      isStale: this.isStale,\n      refetch: this.refetch,\n      remove: this.remove,\n      updatedAt: updatedAt\n    });\n  };\n  _proto.updateQuery = function updateQuery() {\n    var config = this.config;\n    var prevQuery = this.currentQuery;\n    var query = config.queryCache.getQueryByHash(config.queryHash);\n    if (!query) {\n      query = config.queryCache.createQuery(config);\n    }\n    if (query === prevQuery) {\n      return;\n    }\n    this.previousQueryResult = this.currentResult;\n    this.currentQuery = query;\n    this.initialUpdateCount = query.state.updateCount; // Update stale state on query switch\n\n    if (query.state.isInitialData) {\n      if (config.keepPreviousData && prevQuery) {\n        this.isStale = true;\n      } else if (typeof config.initialStale === 'function') {\n        this.isStale = config.initialStale();\n      } else if (typeof config.initialStale === 'boolean') {\n        this.isStale = config.initialStale;\n      } else {\n        this.isStale = typeof query.state.data === 'undefined';\n      }\n    } else {\n      this.isStale = query.isStaleByTime(config.staleTime);\n    }\n    this.updateResult();\n    if (this.listener) {\n      prevQuery == null ? void 0 : prevQuery.unsubscribeObserver(this);\n      this.currentQuery.subscribeObserver(this);\n    }\n  };\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var config = this.config;\n    var type = action.type; // Update stale state on success, error or invalidation\n\n    if (type === 2 || type === 3 || type === 4) {\n      this.isStale = this.currentQuery.isStaleByTime(config.staleTime);\n    } // Store current result and get new result\n\n    var prevResult = this.currentResult;\n    this.updateResult();\n    var currentResult = this.currentResult; // Update timers on success, error or invalidation\n\n    if (type === 2 || type === 3 || type === 4) {\n      this.updateTimers();\n    } // Do not notify if the query was invalidated but the stale state did not changed\n\n    if (type === 4 && currentResult.isStale === prevResult.isStale) {\n      return;\n    } // Determine which callbacks to trigger\n\n    var notifyOptions = {};\n    if (type === 2) {\n      notifyOptions.onSuccess = true;\n    } else if (type === 3) {\n      notifyOptions.onError = true;\n    }\n    if (\n    // Always notify if notifyOnStatusChange is set\n    config.notifyOnStatusChange ||\n    // Otherwise only notify on data or error change\n    currentResult.data !== prevResult.data || currentResult.error !== prevResult.error) {\n      notifyOptions.listener = true;\n    }\n    this.notify(notifyOptions);\n  };\n  _proto.notify = function notify(options) {\n    var config = this.config,\n      currentResult = this.currentResult,\n      currentQuery = this.currentQuery,\n      listener = this.listener;\n    var onSuccess = config.onSuccess,\n      onSettled = config.onSettled,\n      onError = config.onError;\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (options.onSuccess) {\n        if (onSuccess) {\n          notifyManager.schedule(function () {\n            onSuccess(currentResult.data);\n          });\n        }\n        if (onSettled) {\n          notifyManager.schedule(function () {\n            onSettled(currentResult.data, null);\n          });\n        }\n      } else if (options.onError) {\n        if (onError) {\n          notifyManager.schedule(function () {\n            onError(currentResult.error);\n          });\n        }\n        if (onSettled) {\n          notifyManager.schedule(function () {\n            onSettled(undefined, currentResult.error);\n          });\n        }\n      } // Then trigger the listener\n\n      if (options.listener && listener) {\n        notifyManager.schedule(function () {\n          listener(currentResult);\n        });\n      } // Then the global listeners\n\n      if (options.globalListeners) {\n        config.queryCache.notifyGlobalListeners(currentQuery);\n      }\n    });\n  };\n  return QueryObserver;\n}();","map":{"version":3,"names":["_extends","getStatusProps","isDocumentVisible","isServer","isValidTimeout","noop","notifyManager","QueryStatus","DEFAULT_CONFIG","isResolvedQueryConfig","QueryObserver","config","isStale","initialUpdateCount","remove","bind","refetch","fetchMore","unsubscribe","updateQuery","_proto","prototype","subscribe","listener","currentQuery","subscribeObserver","enabled","forceFetchOnMount","refetchOnMount","fetch","optionalFetch","updateTimers","undefined","clearTimers","unsubscribeObserver","updateConfig","prevConfig","prevQuery","queryCache","getResolvedQueryConfig","queryKey","staleTime","updateStaleTimeout","refetchInterval","updateRefetchInterval","getCurrentQuery","getCurrentResult","currentResult","clear","options","fetchMoreVariable","catch","_DEFAULT_CONFIG$queri","queryFn","queries","Promise","resolve","data","suspense","isFetched","observers","length","_this","clearStaleTimeout","timeElapsed","Date","now","updatedAt","timeUntilStale","timeout","Math","max","staleTimeoutId","setTimeout","updateResult","notify","globalListeners","_this2","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearTimeout","clearInterval","_this$previousQueryRe","state","status","isPreviousData","isPlaceholderData","keepPreviousData","isInitialData","previousQueryResult","isSuccess","placeholderData","Success","canFetchMore","error","failureCount","updateCount","isFetchedAfterMount","isFetching","isFetchingMore","query","getQueryByHash","queryHash","createQuery","initialStale","isStaleByTime","onQueryUpdate","action","type","prevResult","notifyOptions","onSuccess","onError","notifyOnStatusChange","onSettled","batch","schedule","notifyGlobalListeners"],"sources":["/Users/apple/mu-grievance-redessal-portal/frontend/node_modules/react-query/es/core/queryObserver.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getStatusProps, isDocumentVisible, isServer, isValidTimeout, noop } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { QueryStatus } from './types';\nimport { DEFAULT_CONFIG, isResolvedQueryConfig } from './config';\nexport var QueryObserver = /*#__PURE__*/function () {\n  function QueryObserver(config) {\n    this.config = config;\n    this.isStale = true;\n    this.initialUpdateCount = 0; // Bind exposed methods\n\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n    this.fetchMore = this.fetchMore.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this); // Subscribe to the query\n\n    this.updateQuery();\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.subscribe = function subscribe(listener) {\n    this.listener = listener || noop;\n    this.currentQuery.subscribeObserver(this);\n\n    if (this.config.enabled && (this.config.forceFetchOnMount || this.config.refetchOnMount === 'always')) {\n      this.fetch();\n    } else {\n      this.optionalFetch();\n    }\n\n    this.updateTimers();\n    return this.unsubscribe;\n  };\n\n  _proto.unsubscribe = function unsubscribe() {\n    this.listener = undefined;\n    this.clearTimers();\n    this.currentQuery.unsubscribeObserver(this);\n  };\n\n  _proto.updateConfig = function updateConfig(config) {\n    var prevConfig = this.config;\n    var prevQuery = this.currentQuery;\n    this.config = isResolvedQueryConfig(config) ? config : this.config.queryCache.getResolvedQueryConfig(this.config.queryKey, config);\n    this.updateQuery(); // Take no further actions if there is no subscriber\n\n    if (!this.listener) {\n      return;\n    } // If we subscribed to a new query, optionally fetch and update refetch\n\n\n    if (this.currentQuery !== prevQuery) {\n      this.optionalFetch();\n      this.updateTimers();\n      return;\n    } // Optionally fetch if the query became enabled\n\n\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch();\n    } // Update stale interval if needed\n\n\n    if (config.enabled !== prevConfig.enabled || config.staleTime !== prevConfig.staleTime) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (config.enabled !== prevConfig.enabled || config.refetchInterval !== prevConfig.refetchInterval) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  }\n  /**\n   * @deprecated\n   */\n  ;\n\n  _proto.clear = function clear() {\n    this.remove();\n  };\n\n  _proto.remove = function remove() {\n    this.currentQuery.remove();\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.currentQuery.refetch(options, this.config);\n  };\n\n  _proto.fetchMore = function fetchMore(fetchMoreVariable, options) {\n    return this.currentQuery.fetchMore(fetchMoreVariable, options, this.config).catch(noop);\n  };\n\n  _proto.fetch = function fetch() {\n    var _DEFAULT_CONFIG$queri;\n\n    // Never try to fetch if no query function has been set\n    if (this.config.queryFn === ((_DEFAULT_CONFIG$queri = DEFAULT_CONFIG.queries) == null ? void 0 : _DEFAULT_CONFIG$queri.queryFn)) {\n      return Promise.resolve(this.currentResult.data);\n    }\n\n    return this.currentQuery.fetch(undefined, this.config).catch(noop);\n  };\n\n  _proto.optionalFetch = function optionalFetch() {\n    if (this.config.enabled && // Only fetch if enabled\n    this.isStale && // Only fetch if stale\n    !(this.config.suspense && this.currentResult.isFetched) && ( // Don't refetch if in suspense mode and the data is already fetched\n    this.config.refetchOnMount || this.currentQuery.observers.length === 1)) {\n      this.fetch();\n    }\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this = this;\n\n    if (isServer) {\n      return;\n    }\n\n    this.clearStaleTimeout();\n\n    if (this.isStale || !isValidTimeout(this.config.staleTime)) {\n      return;\n    }\n\n    var timeElapsed = Date.now() - this.currentResult.updatedAt;\n    var timeUntilStale = this.config.staleTime - timeElapsed + 1;\n    var timeout = Math.max(timeUntilStale, 0);\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this.isStale) {\n        _this.isStale = true;\n\n        _this.updateResult();\n\n        _this.notify({\n          listener: true,\n          globalListeners: true\n        });\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this2 = this;\n\n    if (isServer) {\n      return;\n    }\n\n    this.clearRefetchInterval();\n\n    if (!this.config.enabled || !isValidTimeout(this.config.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this2.config.refetchIntervalInBackground || isDocumentVisible()) {\n        _this2.fetch();\n      }\n    }, this.config.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  };\n\n  _proto.updateResult = function updateResult() {\n    var _this$previousQueryRe;\n\n    var state = this.currentQuery.state;\n    var data = state.data,\n        status = state.status,\n        updatedAt = state.updatedAt;\n    var isPreviousData = false;\n    var isPlaceholderData = false; // Keep previous data if needed\n\n    if (this.config.keepPreviousData && state.isInitialData && ((_this$previousQueryRe = this.previousQueryResult) == null ? void 0 : _this$previousQueryRe.isSuccess)) {\n      data = this.previousQueryResult.data;\n      updatedAt = this.previousQueryResult.updatedAt;\n      status = this.previousQueryResult.status;\n      isPreviousData = true;\n    }\n\n    if (status === 'loading' && this.config.placeholderData) {\n      var placeholderData = typeof this.config.placeholderData === 'function' ? this.config.placeholderData() : this.config.placeholderData;\n\n      if (typeof placeholderData !== 'undefined') {\n        status = QueryStatus.Success;\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    this.currentResult = _extends({}, getStatusProps(status), {\n      canFetchMore: state.canFetchMore,\n      clear: this.remove,\n      data: data,\n      error: state.error,\n      failureCount: state.failureCount,\n      fetchMore: this.fetchMore,\n      isFetched: state.updateCount > 0,\n      isFetchedAfterMount: state.updateCount > this.initialUpdateCount,\n      isFetching: state.isFetching,\n      isFetchingMore: state.isFetchingMore,\n      isInitialData: state.isInitialData,\n      isPreviousData: isPreviousData,\n      isPlaceholderData: isPlaceholderData,\n      isStale: this.isStale,\n      refetch: this.refetch,\n      remove: this.remove,\n      updatedAt: updatedAt\n    });\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var config = this.config;\n    var prevQuery = this.currentQuery;\n    var query = config.queryCache.getQueryByHash(config.queryHash);\n\n    if (!query) {\n      query = config.queryCache.createQuery(config);\n    }\n\n    if (query === prevQuery) {\n      return;\n    }\n\n    this.previousQueryResult = this.currentResult;\n    this.currentQuery = query;\n    this.initialUpdateCount = query.state.updateCount; // Update stale state on query switch\n\n    if (query.state.isInitialData) {\n      if (config.keepPreviousData && prevQuery) {\n        this.isStale = true;\n      } else if (typeof config.initialStale === 'function') {\n        this.isStale = config.initialStale();\n      } else if (typeof config.initialStale === 'boolean') {\n        this.isStale = config.initialStale;\n      } else {\n        this.isStale = typeof query.state.data === 'undefined';\n      }\n    } else {\n      this.isStale = query.isStaleByTime(config.staleTime);\n    }\n\n    this.updateResult();\n\n    if (this.listener) {\n      prevQuery == null ? void 0 : prevQuery.unsubscribeObserver(this);\n      this.currentQuery.subscribeObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var config = this.config;\n    var type = action.type; // Update stale state on success, error or invalidation\n\n    if (type === 2 || type === 3 || type === 4) {\n      this.isStale = this.currentQuery.isStaleByTime(config.staleTime);\n    } // Store current result and get new result\n\n\n    var prevResult = this.currentResult;\n    this.updateResult();\n    var currentResult = this.currentResult; // Update timers on success, error or invalidation\n\n    if (type === 2 || type === 3 || type === 4) {\n      this.updateTimers();\n    } // Do not notify if the query was invalidated but the stale state did not changed\n\n\n    if (type === 4 && currentResult.isStale === prevResult.isStale) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var notifyOptions = {};\n\n    if (type === 2) {\n      notifyOptions.onSuccess = true;\n    } else if (type === 3) {\n      notifyOptions.onError = true;\n    }\n\n    if ( // Always notify if notifyOnStatusChange is set\n    config.notifyOnStatusChange || // Otherwise only notify on data or error change\n    currentResult.data !== prevResult.data || currentResult.error !== prevResult.error) {\n      notifyOptions.listener = true;\n    }\n\n    this.notify(notifyOptions);\n  };\n\n  _proto.notify = function notify(options) {\n    var config = this.config,\n        currentResult = this.currentResult,\n        currentQuery = this.currentQuery,\n        listener = this.listener;\n    var onSuccess = config.onSuccess,\n        onSettled = config.onSettled,\n        onError = config.onError;\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (options.onSuccess) {\n        if (onSuccess) {\n          notifyManager.schedule(function () {\n            onSuccess(currentResult.data);\n          });\n        }\n\n        if (onSettled) {\n          notifyManager.schedule(function () {\n            onSettled(currentResult.data, null);\n          });\n        }\n      } else if (options.onError) {\n        if (onError) {\n          notifyManager.schedule(function () {\n            onError(currentResult.error);\n          });\n        }\n\n        if (onSettled) {\n          notifyManager.schedule(function () {\n            onSettled(undefined, currentResult.error);\n          });\n        }\n      } // Then trigger the listener\n\n\n      if (options.listener && listener) {\n        notifyManager.schedule(function () {\n          listener(currentResult);\n        });\n      } // Then the global listeners\n\n\n      if (options.globalListeners) {\n        config.queryCache.notifyGlobalListeners(currentQuery);\n      }\n    });\n  };\n\n  return QueryObserver;\n}();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}