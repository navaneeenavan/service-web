{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { CancelledError, Console, functionalUpdate, isCancelable, isCancelledError, isDocumentVisible, isOnline, isServer, isValidTimeout, noop, replaceEqualDeep, sleep } from './utils';\nimport { QueryStatus } from './types';\nimport { QueryObserver } from './queryObserver';\nimport { notifyManager } from './notifyManager'; // TYPES\n\nfunction _empty() {}\nvar ActionType = {\n  Failed: 0,\n  Fetch: 1,\n  Success: 2,\n  Error: 3,\n  Invalidate: 4\n};\n\n// CLASS\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\nfunction _invoke(body, then) {\n  var result = body();\n  if (result && result.then) {\n    return result.then(then);\n  }\n  return then(result);\n}\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n  return then ? value.then(then) : value;\n}\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n  return result;\n}\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.config = config;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.queryCache = config.queryCache;\n    this.cacheTime = config.cacheTime;\n    this.observers = [];\n    this.state = getDefaultState(config);\n    this.scheduleGc();\n  }\n  var _proto = Query.prototype;\n  _proto.updateConfig = function updateConfig(config) {\n    this.config = config;\n    this.cacheTime = Math.max(this.cacheTime, config.cacheTime);\n  };\n  _proto.dispatch = function dispatch(action) {\n    var _this = this;\n    this.state = queryReducer(this.state, action);\n    notifyManager.batch(function () {\n      _this.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n      _this.queryCache.notifyGlobalListeners(_this);\n    });\n  };\n  _proto.scheduleGc = function scheduleGc() {\n    var _this2 = this;\n    if (isServer) {\n      return;\n    }\n    this.clearGcTimeout();\n    if (this.observers.length > 0 || !isValidTimeout(this.cacheTime)) {\n      return;\n    }\n    this.gcTimeout = setTimeout(function () {\n      _this2.remove();\n    }, this.cacheTime);\n  };\n  _proto.cancel = function cancel(silent) {\n    var promise = this.promise;\n    if (promise && this.cancelFetch) {\n      this.cancelFetch(silent);\n      return promise.then(noop).catch(noop);\n    }\n    return Promise.resolve(undefined);\n  };\n  _proto.continue = function _continue() {\n    var _this$continueFetch;\n    (_this$continueFetch = this.continueFetch) == null ? void 0 : _this$continueFetch.call(this);\n  };\n  _proto.clearTimersObservers = function clearTimersObservers() {\n    this.observers.forEach(function (observer) {\n      observer.clearTimers();\n    });\n  };\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  };\n  _proto.setData = function setData(updater, options) {\n    var _this$config$isDataEq, _this$config;\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$config$isDataEq = (_this$config = this.config).isDataEqual) == null ? void 0 : _this$config$isDataEq.call(_this$config, prevData, data)) {\n      data = prevData;\n    } else if (this.config.structuralSharing) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Try to determine if more data can be fetched\n\n    var canFetchMore = hasMorePages(this.config, data); // Set data and mark it as cached\n\n    this.dispatch({\n      type: ActionType.Success,\n      data: data,\n      canFetchMore: canFetchMore,\n      updatedAt: options == null ? void 0 : options.updatedAt\n    });\n  }\n  /**\n   * @deprecated\n   */;\n  _proto.clear = function clear() {\n    Console.warn('react-query: clear() has been deprecated, please use remove() instead');\n    this.remove();\n  };\n  _proto.remove = function remove() {\n    this.queryCache.removeQuery(this);\n  };\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.clearTimersObservers();\n    this.cancel();\n  };\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.config.enabled;\n    });\n  };\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || this.state.status !== QueryStatus.Success || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n    return this.state.isInvalidated || this.state.status !== QueryStatus.Success || this.state.updatedAt + staleTime <= Date.now();\n  };\n  _proto.onInteraction = function onInteraction(type) {\n    // Execute the first observer which is enabled,\n    // stale and wants to refetch on this interaction.\n    var staleObserver = this.observers.find(function (observer) {\n      var config = observer.config;\n      var _observer$getCurrentR = observer.getCurrentResult(),\n        isStale = _observer$getCurrentR.isStale;\n      return config.enabled && (type === 'focus' && (config.refetchOnWindowFocus === 'always' || config.refetchOnWindowFocus && isStale) || type === 'online' && (config.refetchOnReconnect === 'always' || config.refetchOnReconnect && isStale));\n    });\n    if (staleObserver) {\n      staleObserver.fetch();\n    } // Continue any paused fetch\n\n    this.continue();\n  }\n  /**\n   * @deprectated\n   */;\n  _proto.subscribe = function subscribe(listener) {\n    var observer = new QueryObserver(this.config);\n    observer.subscribe(listener);\n    return observer;\n  };\n  _proto.subscribeObserver = function subscribeObserver(observer) {\n    this.observers.push(observer); // Stop the query from being garbage collected\n\n    this.clearGcTimeout();\n  };\n  _proto.unsubscribeObserver = function unsubscribeObserver(observer) {\n    this.observers = this.observers.filter(function (x) {\n      return x !== observer;\n    });\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel();\n      }\n      this.scheduleGc();\n    }\n  };\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: ActionType.Invalidate\n      });\n    }\n  }\n  /**\n   * @deprectated\n   */;\n  _proto.refetch = function refetch(options, config) {\n    var promise = this.fetch(undefined, config);\n    if (!(options == null ? void 0 : options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  /**\n   * @deprectated\n   */;\n  _proto.fetchMore = function fetchMore(fetchMoreVariable, options, config) {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable: fetchMoreVariable,\n        previous: (options == null ? void 0 : options.previous) || false\n      }\n    }, config);\n  };\n  _proto.fetch = function fetch(options, config) {\n    try {\n      var _exit2 = false;\n      var _this4 = this;\n      return _invoke(function () {\n        if (_this4.promise) {\n          return function () {\n            if ((options == null ? void 0 : options.fetchMore) && _this4.state.data) {\n              // Silently cancel current fetch if the user wants to fetch more\n              return _awaitIgnored(_this4.cancel(true));\n            } else {\n              // Return current promise if we are already fetching\n              _exit2 = true;\n              return _this4.promise;\n            }\n          }();\n        }\n      }, function (_result2) {\n        if (_exit2) return _result2;\n\n        // Update config if passed, otherwise the config from the last execution is used\n        if (config) {\n          _this4.updateConfig(config);\n        }\n        config = _this4.config; // Get the query function params\n\n        var filter = config.queryFnParamsFilter;\n        var params = filter ? filter(_this4.queryKey) : _this4.queryKey;\n        _this4.promise = _async(function () {\n          return _catch(function () {\n            var data;\n            return _invoke(function () {\n              if (config.infinite) {\n                return _await(_this4.startInfiniteFetch(config, params, options), function (_this4$startInfiniteF) {\n                  data = _this4$startInfiniteF;\n                });\n              } else {\n                return _await(_this4.startFetch(config, params, options), function (_this4$startFetch) {\n                  data = _this4$startFetch;\n                });\n              }\n            }, function () {\n              // Set success state\n              _this4.setData(data); // Cleanup\n\n              delete _this4.promise; // Return data\n\n              return data;\n            });\n          }, function (error) {\n            // Set error state if needed\n            if (!(isCancelledError(error) && error.silent)) {\n              _this4.dispatch({\n                type: ActionType.Error,\n                error: error\n              });\n            } // Log error\n\n            if (!isCancelledError(error)) {\n              Console.error(error);\n            } // Cleanup\n\n            delete _this4.promise; // Propagate error\n\n            throw error;\n          });\n        })();\n        return _this4.promise;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.startFetch = function startFetch(config, params, _options) {\n    // Create function to fetch the data\n    var fetchData = function fetchData() {\n      return config.queryFn.apply(config, params);\n    }; // Set to fetching state if not already in it\n\n    if (!this.state.isFetching) {\n      this.dispatch({\n        type: ActionType.Fetch\n      });\n    } // Try to fetch the data\n\n    return this.tryFetchData(config, fetchData);\n  };\n  _proto.startInfiniteFetch = function startInfiniteFetch(config, params, options) {\n    var fetchMore = options == null ? void 0 : options.fetchMore;\n    var _ref = fetchMore || {},\n      previous = _ref.previous,\n      fetchMoreVariable = _ref.fetchMoreVariable;\n    var isFetchingMore = fetchMore ? previous ? 'previous' : 'next' : false;\n    var prevPages = this.state.data || []; // Create function to fetch a page\n\n    var fetchPage = _async(function (pages, prepend, cursor) {\n      var lastPage = getLastPage(pages, prepend);\n      if (typeof cursor === 'undefined' && typeof lastPage !== 'undefined' && config.getFetchMore) {\n        cursor = config.getFetchMore(lastPage, pages);\n      }\n      return !Boolean(cursor) && typeof lastPage !== 'undefined' ? pages : _await(config.queryFn.apply(config, params.concat([cursor])), function (page) {\n        return prepend ? [page].concat(pages) : [].concat(pages, [page]);\n      });\n    }); // Create function to fetch the data\n\n    var fetchData = function fetchData() {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable);\n      } else if (!prevPages.length) {\n        return fetchPage([]);\n      } else {\n        var promise = fetchPage([]);\n        for (var i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage);\n        }\n        return promise;\n      }\n    }; // Set to fetching state if not already in it\n\n    if (!this.state.isFetching || this.state.isFetchingMore !== isFetchingMore) {\n      this.dispatch({\n        type: ActionType.Fetch,\n        isFetchingMore: isFetchingMore\n      });\n    } // Try to get the data\n\n    return this.tryFetchData(config, fetchData);\n  };\n  _proto.tryFetchData = function tryFetchData(config, fn) {\n    var _this5 = this;\n    return new Promise(function (outerResolve, outerReject) {\n      var resolved = false;\n      var continueLoop;\n      var cancelTransport;\n      var done = function done() {\n        resolved = true;\n        delete _this5.cancelFetch;\n        delete _this5.continueFetch;\n        delete _this5.isTransportCancelable; // End loop if currently paused\n\n        continueLoop == null ? void 0 : continueLoop();\n      };\n      var resolve = function resolve(value) {\n        done();\n        outerResolve(value);\n      };\n      var reject = function reject(value) {\n        done();\n        outerReject(value);\n      }; // Create callback to cancel this fetch\n\n      _this5.cancelFetch = function (silent) {\n        reject(new CancelledError(silent));\n        cancelTransport == null ? void 0 : cancelTransport();\n      }; // Create callback to continue this fetch\n\n      _this5.continueFetch = function () {\n        continueLoop == null ? void 0 : continueLoop();\n      }; // Create loop function\n\n      var run = _async(function () {\n        return _catch(function () {\n          // Execute query\n          var promiseOrValue = fn(); // Check if the transport layer support cancellation\n\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = function cancelTransport() {\n              try {\n                promiseOrValue.cancel();\n              } catch (_unused) {}\n            };\n            _this5.isTransportCancelable = true;\n          } // Await data\n\n          return _await(promiseOrValue, function (_promiseOrValue) {\n            resolve(_promiseOrValue);\n          });\n        }, function (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return;\n          } // Do we need to retry the request?\n\n          var failureCount = _this5.state.failureCount;\n          var retry = config.retry,\n            retryDelay = config.retryDelay;\n          var shouldRetry = retry === true || failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error);\n            return;\n          } // Increase the failureCount\n\n          _this5.dispatch({\n            type: ActionType.Failed\n          }); // Delay\n\n          return _await(sleep(functionalUpdate(retryDelay, failureCount) || 0), function () {\n            // Pause retry if the document is not visible or when the device is offline\n            return _invoke(function () {\n              if (!isDocumentVisible() || !isOnline()) {\n                return _awaitIgnored(new Promise(function (continueResolve) {\n                  continueLoop = continueResolve;\n                }));\n              }\n            }, function () {\n              if (!resolved) {\n                run();\n              }\n            }); // Try again if not resolved yet\n          });\n        });\n      }); // Start loop\n\n      run();\n    });\n  };\n  return Query;\n}();\nfunction getLastPage(pages, previous) {\n  return previous ? pages[0] : pages[pages.length - 1];\n}\nfunction hasMorePages(config, pages, previous) {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages));\n  }\n}\nfunction getDefaultState(config) {\n  var data = typeof config.initialData === 'function' ? config.initialData() : config.initialData;\n  var status = typeof data !== 'undefined' ? QueryStatus.Success : config.enabled ? QueryStatus.Loading : QueryStatus.Idle;\n  return {\n    canFetchMore: hasMorePages(config, data),\n    data: data,\n    error: null,\n    failureCount: 0,\n    isFetching: status === QueryStatus.Loading,\n    isFetchingMore: false,\n    isInitialData: true,\n    isInvalidated: false,\n    status: status,\n    updateCount: 0,\n    updatedAt: Date.now()\n  };\n}\nexport function queryReducer(state, action) {\n  var _action$updatedAt;\n  switch (action.type) {\n    case ActionType.Failed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n    case ActionType.Fetch:\n      return _extends({}, state, {\n        failureCount: 0,\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        status: typeof state.data !== 'undefined' ? QueryStatus.Success : QueryStatus.Loading\n      });\n    case ActionType.Success:\n      return _extends({}, state, {\n        canFetchMore: action.canFetchMore,\n        data: action.data,\n        error: null,\n        failureCount: 0,\n        isFetching: false,\n        isFetchingMore: false,\n        isInitialData: false,\n        isInvalidated: false,\n        status: QueryStatus.Success,\n        updateCount: state.updateCount + 1,\n        updatedAt: (_action$updatedAt = action.updatedAt) != null ? _action$updatedAt : Date.now()\n      });\n    case ActionType.Error:\n      return _extends({}, state, {\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isFetching: false,\n        isFetchingMore: false,\n        status: QueryStatus.Error,\n        throwInErrorBoundary: true,\n        updateCount: state.updateCount + 1\n      });\n    case ActionType.Invalidate:\n      return _extends({}, state, {\n        isInvalidated: true\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["_extends","CancelledError","Console","functionalUpdate","isCancelable","isCancelledError","isDocumentVisible","isOnline","isServer","isValidTimeout","noop","replaceEqualDeep","sleep","QueryStatus","QueryObserver","notifyManager","_empty","ActionType","Failed","Fetch","Success","Error","Invalidate","_awaitIgnored","value","direct","then","Promise","resolve","_invoke","body","result","_await","_catch","recover","e","_async","f","args","i","arguments","length","apply","reject","Query","config","queryKey","queryHash","queryCache","cacheTime","observers","state","getDefaultState","scheduleGc","_proto","prototype","updateConfig","Math","max","dispatch","action","_this","queryReducer","batch","forEach","observer","onQueryUpdate","notifyGlobalListeners","_this2","clearGcTimeout","gcTimeout","setTimeout","remove","cancel","silent","promise","cancelFetch","catch","undefined","continue","_continue","_this$continueFetch","continueFetch","call","clearTimersObservers","clearTimers","clearTimeout","setData","updater","options","_this$config$isDataEq","_this$config","prevData","data","isDataEqual","structuralSharing","canFetchMore","hasMorePages","type","updatedAt","clear","warn","removeQuery","destroy","isActive","some","enabled","isStale","isInvalidated","status","getCurrentResult","isStaleByTime","staleTime","Date","now","onInteraction","staleObserver","find","_observer$getCurrentR","refetchOnWindowFocus","refetchOnReconnect","fetch","subscribe","listener","subscribeObserver","push","unsubscribeObserver","filter","x","isTransportCancelable","invalidate","refetch","throwOnError","fetchMore","fetchMoreVariable","previous","_exit2","_this4","_result2","queryFnParamsFilter","params","infinite","startInfiniteFetch","_this4$startInfiniteF","startFetch","_this4$startFetch","error","_options","fetchData","queryFn","isFetching","tryFetchData","_ref","isFetchingMore","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","Boolean","concat","page","fn","_this5","outerResolve","outerReject","resolved","continueLoop","cancelTransport","done","run","promiseOrValue","_unused","_promiseOrValue","failureCount","retry","retryDelay","shouldRetry","continueResolve","Array","isArray","initialData","Loading","Idle","isInitialData","updateCount","_action$updatedAt","throwInErrorBoundary"],"sources":["/Users/apple/mu-grievance-redessal-portal/frontend/node_modules/react-query/es/core/query.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { CancelledError, Console, functionalUpdate, isCancelable, isCancelledError, isDocumentVisible, isOnline, isServer, isValidTimeout, noop, replaceEqualDeep, sleep } from './utils';\nimport { QueryStatus } from './types';\nimport { QueryObserver } from './queryObserver';\nimport { notifyManager } from './notifyManager'; // TYPES\n\nfunction _empty() {}\n\nvar ActionType = {\n  Failed: 0,\n  Fetch: 1,\n  Success: 2,\n  Error: 3,\n  Invalidate: 4\n};\n\n// CLASS\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.config = config;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.queryCache = config.queryCache;\n    this.cacheTime = config.cacheTime;\n    this.observers = [];\n    this.state = getDefaultState(config);\n    this.scheduleGc();\n  }\n\n  var _proto = Query.prototype;\n\n  _proto.updateConfig = function updateConfig(config) {\n    this.config = config;\n    this.cacheTime = Math.max(this.cacheTime, config.cacheTime);\n  };\n\n  _proto.dispatch = function dispatch(action) {\n    var _this = this;\n\n    this.state = queryReducer(this.state, action);\n    notifyManager.batch(function () {\n      _this.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n\n      _this.queryCache.notifyGlobalListeners(_this);\n    });\n  };\n\n  _proto.scheduleGc = function scheduleGc() {\n    var _this2 = this;\n\n    if (isServer) {\n      return;\n    }\n\n    this.clearGcTimeout();\n\n    if (this.observers.length > 0 || !isValidTimeout(this.cacheTime)) {\n      return;\n    }\n\n    this.gcTimeout = setTimeout(function () {\n      _this2.remove();\n    }, this.cacheTime);\n  };\n\n  _proto.cancel = function cancel(silent) {\n    var promise = this.promise;\n\n    if (promise && this.cancelFetch) {\n      this.cancelFetch(silent);\n      return promise.then(noop).catch(noop);\n    }\n\n    return Promise.resolve(undefined);\n  };\n\n  _proto.continue = function _continue() {\n    var _this$continueFetch;\n\n    (_this$continueFetch = this.continueFetch) == null ? void 0 : _this$continueFetch.call(this);\n  };\n\n  _proto.clearTimersObservers = function clearTimersObservers() {\n    this.observers.forEach(function (observer) {\n      observer.clearTimers();\n    });\n  };\n\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  };\n\n  _proto.setData = function setData(updater, options) {\n    var _this$config$isDataEq, _this$config;\n\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$config$isDataEq = (_this$config = this.config).isDataEqual) == null ? void 0 : _this$config$isDataEq.call(_this$config, prevData, data)) {\n      data = prevData;\n    } else if (this.config.structuralSharing) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Try to determine if more data can be fetched\n\n\n    var canFetchMore = hasMorePages(this.config, data); // Set data and mark it as cached\n\n    this.dispatch({\n      type: ActionType.Success,\n      data: data,\n      canFetchMore: canFetchMore,\n      updatedAt: options == null ? void 0 : options.updatedAt\n    });\n  }\n  /**\n   * @deprecated\n   */\n  ;\n\n  _proto.clear = function clear() {\n    Console.warn('react-query: clear() has been deprecated, please use remove() instead');\n    this.remove();\n  };\n\n  _proto.remove = function remove() {\n    this.queryCache.removeQuery(this);\n  };\n\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.clearTimersObservers();\n    this.cancel();\n  };\n\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.config.enabled;\n    });\n  };\n\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || this.state.status !== QueryStatus.Success || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n\n    return this.state.isInvalidated || this.state.status !== QueryStatus.Success || this.state.updatedAt + staleTime <= Date.now();\n  };\n\n  _proto.onInteraction = function onInteraction(type) {\n    // Execute the first observer which is enabled,\n    // stale and wants to refetch on this interaction.\n    var staleObserver = this.observers.find(function (observer) {\n      var config = observer.config;\n\n      var _observer$getCurrentR = observer.getCurrentResult(),\n          isStale = _observer$getCurrentR.isStale;\n\n      return config.enabled && (type === 'focus' && (config.refetchOnWindowFocus === 'always' || config.refetchOnWindowFocus && isStale) || type === 'online' && (config.refetchOnReconnect === 'always' || config.refetchOnReconnect && isStale));\n    });\n\n    if (staleObserver) {\n      staleObserver.fetch();\n    } // Continue any paused fetch\n\n\n    this.continue();\n  }\n  /**\n   * @deprectated\n   */\n  ;\n\n  _proto.subscribe = function subscribe(listener) {\n    var observer = new QueryObserver(this.config);\n    observer.subscribe(listener);\n    return observer;\n  };\n\n  _proto.subscribeObserver = function subscribeObserver(observer) {\n    this.observers.push(observer); // Stop the query from being garbage collected\n\n    this.clearGcTimeout();\n  };\n\n  _proto.unsubscribeObserver = function unsubscribeObserver(observer) {\n    this.observers = this.observers.filter(function (x) {\n      return x !== observer;\n    });\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel();\n      }\n\n      this.scheduleGc();\n    }\n  };\n\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: ActionType.Invalidate\n      });\n    }\n  }\n  /**\n   * @deprectated\n   */\n  ;\n\n  _proto.refetch = function refetch(options, config) {\n    var promise = this.fetch(undefined, config);\n\n    if (!(options == null ? void 0 : options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n  /**\n   * @deprectated\n   */\n  ;\n\n  _proto.fetchMore = function fetchMore(fetchMoreVariable, options, config) {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable: fetchMoreVariable,\n        previous: (options == null ? void 0 : options.previous) || false\n      }\n    }, config);\n  };\n\n  _proto.fetch = function fetch(options, config) {\n    try {\n      var _exit2 = false;\n\n      var _this4 = this;\n\n      return _invoke(function () {\n        if (_this4.promise) {\n          return function () {\n            if ((options == null ? void 0 : options.fetchMore) && _this4.state.data) {\n              // Silently cancel current fetch if the user wants to fetch more\n              return _awaitIgnored(_this4.cancel(true));\n            } else {\n              // Return current promise if we are already fetching\n              _exit2 = true;\n              return _this4.promise;\n            }\n          }();\n        }\n      }, function (_result2) {\n        if (_exit2) return _result2;\n\n        // Update config if passed, otherwise the config from the last execution is used\n        if (config) {\n          _this4.updateConfig(config);\n        }\n\n        config = _this4.config; // Get the query function params\n\n        var filter = config.queryFnParamsFilter;\n        var params = filter ? filter(_this4.queryKey) : _this4.queryKey;\n        _this4.promise = _async(function () {\n          return _catch(function () {\n            var data;\n            return _invoke(function () {\n              if (config.infinite) {\n                return _await(_this4.startInfiniteFetch(config, params, options), function (_this4$startInfiniteF) {\n                  data = _this4$startInfiniteF;\n                });\n              } else {\n                return _await(_this4.startFetch(config, params, options), function (_this4$startFetch) {\n                  data = _this4$startFetch;\n                });\n              }\n            }, function () {\n              // Set success state\n              _this4.setData(data); // Cleanup\n\n\n              delete _this4.promise; // Return data\n\n              return data;\n            });\n          }, function (error) {\n            // Set error state if needed\n            if (!(isCancelledError(error) && error.silent)) {\n              _this4.dispatch({\n                type: ActionType.Error,\n                error: error\n              });\n            } // Log error\n\n\n            if (!isCancelledError(error)) {\n              Console.error(error);\n            } // Cleanup\n\n\n            delete _this4.promise; // Propagate error\n\n            throw error;\n          });\n        })();\n        return _this4.promise;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.startFetch = function startFetch(config, params, _options) {\n    // Create function to fetch the data\n    var fetchData = function fetchData() {\n      return config.queryFn.apply(config, params);\n    }; // Set to fetching state if not already in it\n\n\n    if (!this.state.isFetching) {\n      this.dispatch({\n        type: ActionType.Fetch\n      });\n    } // Try to fetch the data\n\n\n    return this.tryFetchData(config, fetchData);\n  };\n\n  _proto.startInfiniteFetch = function startInfiniteFetch(config, params, options) {\n    var fetchMore = options == null ? void 0 : options.fetchMore;\n\n    var _ref = fetchMore || {},\n        previous = _ref.previous,\n        fetchMoreVariable = _ref.fetchMoreVariable;\n\n    var isFetchingMore = fetchMore ? previous ? 'previous' : 'next' : false;\n    var prevPages = this.state.data || []; // Create function to fetch a page\n\n    var fetchPage = _async(function (pages, prepend, cursor) {\n      var lastPage = getLastPage(pages, prepend);\n\n      if (typeof cursor === 'undefined' && typeof lastPage !== 'undefined' && config.getFetchMore) {\n        cursor = config.getFetchMore(lastPage, pages);\n      }\n\n      return !Boolean(cursor) && typeof lastPage !== 'undefined' ? pages : _await(config.queryFn.apply(config, params.concat([cursor])), function (page) {\n        return prepend ? [page].concat(pages) : [].concat(pages, [page]);\n      });\n    }); // Create function to fetch the data\n\n\n    var fetchData = function fetchData() {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable);\n      } else if (!prevPages.length) {\n        return fetchPage([]);\n      } else {\n        var promise = fetchPage([]);\n\n        for (var i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage);\n        }\n\n        return promise;\n      }\n    }; // Set to fetching state if not already in it\n\n\n    if (!this.state.isFetching || this.state.isFetchingMore !== isFetchingMore) {\n      this.dispatch({\n        type: ActionType.Fetch,\n        isFetchingMore: isFetchingMore\n      });\n    } // Try to get the data\n\n\n    return this.tryFetchData(config, fetchData);\n  };\n\n  _proto.tryFetchData = function tryFetchData(config, fn) {\n    var _this5 = this;\n\n    return new Promise(function (outerResolve, outerReject) {\n      var resolved = false;\n      var continueLoop;\n      var cancelTransport;\n\n      var done = function done() {\n        resolved = true;\n        delete _this5.cancelFetch;\n        delete _this5.continueFetch;\n        delete _this5.isTransportCancelable; // End loop if currently paused\n\n        continueLoop == null ? void 0 : continueLoop();\n      };\n\n      var resolve = function resolve(value) {\n        done();\n        outerResolve(value);\n      };\n\n      var reject = function reject(value) {\n        done();\n        outerReject(value);\n      }; // Create callback to cancel this fetch\n\n\n      _this5.cancelFetch = function (silent) {\n        reject(new CancelledError(silent));\n        cancelTransport == null ? void 0 : cancelTransport();\n      }; // Create callback to continue this fetch\n\n\n      _this5.continueFetch = function () {\n        continueLoop == null ? void 0 : continueLoop();\n      }; // Create loop function\n\n\n      var run = _async(function () {\n        return _catch(function () {\n          // Execute query\n          var promiseOrValue = fn(); // Check if the transport layer support cancellation\n\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = function cancelTransport() {\n              try {\n                promiseOrValue.cancel();\n              } catch (_unused) {}\n            };\n\n            _this5.isTransportCancelable = true;\n          } // Await data\n\n\n          return _await(promiseOrValue, function (_promiseOrValue) {\n            resolve(_promiseOrValue);\n          });\n        }, function (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return;\n          } // Do we need to retry the request?\n\n\n          var failureCount = _this5.state.failureCount;\n          var retry = config.retry,\n              retryDelay = config.retryDelay;\n          var shouldRetry = retry === true || failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error);\n            return;\n          } // Increase the failureCount\n\n\n          _this5.dispatch({\n            type: ActionType.Failed\n          }); // Delay\n\n\n          return _await(sleep(functionalUpdate(retryDelay, failureCount) || 0), function () {\n            // Pause retry if the document is not visible or when the device is offline\n            return _invoke(function () {\n              if (!isDocumentVisible() || !isOnline()) {\n                return _awaitIgnored(new Promise(function (continueResolve) {\n                  continueLoop = continueResolve;\n                }));\n              }\n            }, function () {\n              if (!resolved) {\n                run();\n              }\n            }); // Try again if not resolved yet\n          });\n        });\n      }); // Start loop\n\n\n      run();\n    });\n  };\n\n  return Query;\n}();\n\nfunction getLastPage(pages, previous) {\n  return previous ? pages[0] : pages[pages.length - 1];\n}\n\nfunction hasMorePages(config, pages, previous) {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages));\n  }\n}\n\nfunction getDefaultState(config) {\n  var data = typeof config.initialData === 'function' ? config.initialData() : config.initialData;\n  var status = typeof data !== 'undefined' ? QueryStatus.Success : config.enabled ? QueryStatus.Loading : QueryStatus.Idle;\n  return {\n    canFetchMore: hasMorePages(config, data),\n    data: data,\n    error: null,\n    failureCount: 0,\n    isFetching: status === QueryStatus.Loading,\n    isFetchingMore: false,\n    isInitialData: true,\n    isInvalidated: false,\n    status: status,\n    updateCount: 0,\n    updatedAt: Date.now()\n  };\n}\n\nexport function queryReducer(state, action) {\n  var _action$updatedAt;\n\n  switch (action.type) {\n    case ActionType.Failed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n\n    case ActionType.Fetch:\n      return _extends({}, state, {\n        failureCount: 0,\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        status: typeof state.data !== 'undefined' ? QueryStatus.Success : QueryStatus.Loading\n      });\n\n    case ActionType.Success:\n      return _extends({}, state, {\n        canFetchMore: action.canFetchMore,\n        data: action.data,\n        error: null,\n        failureCount: 0,\n        isFetching: false,\n        isFetchingMore: false,\n        isInitialData: false,\n        isInvalidated: false,\n        status: QueryStatus.Success,\n        updateCount: state.updateCount + 1,\n        updatedAt: (_action$updatedAt = action.updatedAt) != null ? _action$updatedAt : Date.now()\n      });\n\n    case ActionType.Error:\n      return _extends({}, state, {\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isFetching: false,\n        isFetchingMore: false,\n        status: QueryStatus.Error,\n        throwInErrorBoundary: true,\n        updateCount: state.updateCount + 1\n      });\n\n    case ActionType.Invalidate:\n      return _extends({}, state, {\n        isInvalidated: true\n      });\n\n    default:\n      return state;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}