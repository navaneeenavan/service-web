{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stableStringify } from './utils';\n// CONFIG\nexport var defaultQueryKeySerializerFn = function defaultQueryKeySerializerFn(queryKey) {\n  try {\n    var arrayQueryKey = Array.isArray(queryKey) ? queryKey : [queryKey];\n    var queryHash = stableStringify(arrayQueryKey);\n    arrayQueryKey = JSON.parse(queryHash);\n    return [queryHash, arrayQueryKey];\n  } catch (_unused) {\n    throw new Error('A valid query key is required!');\n  }\n};\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\n\nexport var DEFAULT_CONFIG = {\n  queries: {\n    cacheTime: 5 * 60 * 1000,\n    enabled: true,\n    notifyOnStatusChange: true,\n    queryFn: function queryFn() {\n      return Promise.reject();\n    },\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true,\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    structuralSharing: true\n  }\n};\nexport function getDefaultReactQueryConfig() {\n  return {\n    queries: _extends({}, DEFAULT_CONFIG.queries),\n    mutations: _extends({}, DEFAULT_CONFIG.mutations)\n  };\n}\nexport function mergeReactQueryConfigs(a, b) {\n  return {\n    shared: _extends({}, a.shared, b.shared),\n    queries: _extends({}, a.queries, b.queries),\n    mutations: _extends({}, a.mutations, b.mutations)\n  };\n}\nexport function getResolvedQueryConfig(queryCache, queryKey, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n  var resolvedConfig = _extends({}, DEFAULT_CONFIG.queries, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.queries, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.queries, config);\n  var result = resolvedConfig.queryKeySerializerFn(queryKey);\n  resolvedConfig.queryCache = queryCache;\n  resolvedConfig.queryHash = result[0];\n  resolvedConfig.queryKey = result[1];\n  return resolvedConfig;\n}\nexport function isResolvedQueryConfig(config) {\n  return Boolean(config.queryHash);\n}\nexport function getResolvedMutationConfig(queryCache, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n  return _extends({}, DEFAULT_CONFIG.mutations, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.mutations, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.mutations, config);\n}","map":{"version":3,"names":["_extends","stableStringify","defaultQueryKeySerializerFn","queryKey","arrayQueryKey","Array","isArray","queryHash","JSON","parse","_unused","Error","DEFAULT_CONFIG","queries","cacheTime","enabled","notifyOnStatusChange","queryFn","Promise","reject","queryKeySerializerFn","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","retry","retryDelay","attemptIndex","Math","min","pow","staleTime","structuralSharing","getDefaultReactQueryConfig","mutations","mergeReactQueryConfigs","a","b","shared","getResolvedQueryConfig","queryCache","contextConfig","config","queryCacheConfig","getDefaultConfig","resolvedConfig","result","isResolvedQueryConfig","Boolean","getResolvedMutationConfig"],"sources":["/Users/apple/mu-grievance-redessal-portal/frontend/node_modules/react-query/es/core/config.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stableStringify } from './utils';\n// CONFIG\nexport var defaultQueryKeySerializerFn = function defaultQueryKeySerializerFn(queryKey) {\n  try {\n    var arrayQueryKey = Array.isArray(queryKey) ? queryKey : [queryKey];\n    var queryHash = stableStringify(arrayQueryKey);\n    arrayQueryKey = JSON.parse(queryHash);\n    return [queryHash, arrayQueryKey];\n  } catch (_unused) {\n    throw new Error('A valid query key is required!');\n  }\n};\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\n\nexport var DEFAULT_CONFIG = {\n  queries: {\n    cacheTime: 5 * 60 * 1000,\n    enabled: true,\n    notifyOnStatusChange: true,\n    queryFn: function queryFn() {\n      return Promise.reject();\n    },\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true,\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    structuralSharing: true\n  }\n};\nexport function getDefaultReactQueryConfig() {\n  return {\n    queries: _extends({}, DEFAULT_CONFIG.queries),\n    mutations: _extends({}, DEFAULT_CONFIG.mutations)\n  };\n}\nexport function mergeReactQueryConfigs(a, b) {\n  return {\n    shared: _extends({}, a.shared, b.shared),\n    queries: _extends({}, a.queries, b.queries),\n    mutations: _extends({}, a.mutations, b.mutations)\n  };\n}\nexport function getResolvedQueryConfig(queryCache, queryKey, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n\n  var resolvedConfig = _extends({}, DEFAULT_CONFIG.queries, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.queries, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.queries, config);\n\n  var result = resolvedConfig.queryKeySerializerFn(queryKey);\n  resolvedConfig.queryCache = queryCache;\n  resolvedConfig.queryHash = result[0];\n  resolvedConfig.queryKey = result[1];\n  return resolvedConfig;\n}\nexport function isResolvedQueryConfig(config) {\n  return Boolean(config.queryHash);\n}\nexport function getResolvedMutationConfig(queryCache, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n  return _extends({}, DEFAULT_CONFIG.mutations, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.mutations, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.mutations, config);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}